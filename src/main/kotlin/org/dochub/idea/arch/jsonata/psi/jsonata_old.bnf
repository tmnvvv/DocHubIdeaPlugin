// https://github.com/JetBrains/Grammar-Kit/blob/master/TUTORIAL.md
/*
(
    $strin(1, 2, 3) + 10;
    $substring("Hello World", /test\//);
    $a := ($a:=1; $b:=1) + $b;
    $string := function() {1};
    $test ~> |test|{a:1}, []| ~> |test|{a:1}, []|;
    $uppertrim := $trim ~> $uppercase ~> $test ~> |test.test_|1,[1,2]|;
    $transform := (a ~> |test.test_|1,[1,2]|).a + 1 + a.$string(1, 2, ($d:= function() {1}; $d()));
    $TEST := function($a,$b) {
        {
            q: 1+(1+2+(11*2))+3,
            u: a.$string().$string(),
            z: $test ~> |test|{a:1}, []| ~> |test|{a:1}, []|,
            f: $uppertrim(1, {}^(1=2)),
            n: {}#$i@$a.test[1=1].{s:1},
            a: a^({a:1}[1], aa).a,
            b: [1..2].a[a+2+(10*[1..2])].a^(>a),
            u: 1 + [1],
            c: {
                a: [1..2].test,
                d: $TEST_[1=2] + (a + 1)
            }.test,
            n: -2 and 2 and (a+1),
            z: 10&20 ? 1+[1]+{a:1}.test ? 1 : 2 : 2+2
        }
        {
            a : 10
        }
    };
    $a;
    $PEST := 1
)
 */
{
    parserClass="org.dochub.idea.arch.jsonata.JSONataParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    psiClassPrefix="JSONata"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.dochub.idea.arch.jsonata.psi.JSONataTypes"
    elementTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataElementType"
    tokenTypeClass="org.dochub.idea.arch.jsonata.psi.JSONataTokenType"

    tokens = [
        comment="regexp:\/\*[\s\S]*?\*\/"
        space='regexp:\s+'
        string = "regexp:\"[^\"]*\"|'[^']*'"
        number = "regexp:-?(?=[1-9]|0(?!\d))\d+(\.\d+)?([eE][+-]?\d+)?"
        boolean = "regexp:true|false|null"
        id = "regexp:\p{Alpha}+\w*"
        range = "regexp:\[([1-9]|0)+\.\.([1-9]|0)+\]*"
        variable = "regexp:\$([a-z]|[A-Z]|\_)*"
        sys_variable = "regexp:\*\*|\*|\%"
        regex = "regexp:\/.+[^\\]/"

        comma = ","
        colon = ":"
        brace1 = "{"
        brace2 = "}"
        brack1 = "["
        brack2 = "]"
    ]
    extends("array|object|json")=value
}

root ::= jsonata
json ::= array | object  { hooks=[wsBinders="null, null"] }
value ::= jsonata | string | number | boolean

array ::= '[' [!']' item (!']' ',' item) *] ']' {pin(".*")=1 extends=json}
private item ::= string | number | boolean | json {recoverWhile=recover}
object ::= '{' [!'}' prop (!'}' ',' prop) *] '}' {pin(".*")=1 extends=json}
prop ::= [] jname ':' value {pin=1 recoverWhile=recover} // remove [] to make NAME mandatory
jname ::= id | string
private recover ::= !(',' | ']' | '}' | '[' | '{' | '(' | ')')

jsonata ::= function | variable_set | chain | transform_call | expression

private bind_arr_item ::= '@' variable
private bind_arr_index ::= '#' variable
private bind_arr_variable ::= bind_arr_item [bind_arr_index] | bind_arr_index [bind_arr_item]
deep_prop ::=
            (range | sys_variable | variable | jname | object | array | block)
            [bind_arr_variable]
            ( '.' (jname | methods | object )) *
private post ::= ('.' (filter | deep_prop )) | ('^(' order_params ')')
filter ::= deep_prop  '[' expression ']' post *

method_params ::= expression (',' expression) *
methods ::= ('$string' | '$number()') '(' [method_params|] ')'

private function_params ::= variable (',' variable) *
private function_body ::= jsonata *
function ::= variable ':=' 'function' '(' (function_params|) ')' '{' function_body '}'
function_call_params ::= expression (',' expression) *
function_call ::= variable '(' [function_call_params] ')'

transform_location ::= id ('.' id) *
transform ::= '|' transform_location '|' expression [','  array] '|'
transform_call ::= expression '~>' transform ('~>' transform) *

chain_simple ::= variable '~>' (transform | chain | variable)
chain ::= chain_simple ('~>' transform | chain | variable) *


variable_set ::= variable ':=' jsonata;
private block_body ::= jsonata (';' jsonata) *;
block ::= '(' block_body ')'
private order_param ::= ['>'|'<'] expression
order_params ::= order_param (',' order_param) *
order ::= (deep_prop | filter) '^(' order_params ')' post *

arguments ::= string | number | boolean | function_call | order | filter | deep_prop | object | array | expression
private math_operators ::= '+' | '-' | '*' | '/' | '%'
private comp_operators ::= '=' | '!=' | '>' | '<' | '>=' | '<=' | ' in ' | ' and ' | ' or '
private concat_operators ::= '&'
private cond_operators ::= '?' expression ':'
operators ::= math_operators | comp_operators | concat_operators | cond_operators
expression ::= regex | arguments  (operators arguments) *

